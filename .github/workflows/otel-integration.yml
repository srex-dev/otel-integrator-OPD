name: OpenTelemetry Integration Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      scan_path:
        description: 'Path to scan for services'
        required: false
        default: '.'
      enhanced_mode:
        description: 'Use enhanced discovery mode'
        required: false
        default: true
        type: boolean

jobs:
  discover-and-validate:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.9, 3.10, 3.11]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Run service discovery
      run: |
        if [ "${{ github.event.inputs.enhanced_mode }}" = "true" ]; then
          python main.py run --enhanced --scan-path ${{ github.event.inputs.scan_path || '.' }}
        else
          python main.py run --scan-path ${{ github.event.inputs.scan_path || '.' }}
        fi
      env:
        ELASTIC_APM_ENDPOINT: ${{ secrets.ELASTIC_APM_ENDPOINT }}
        INFLUXDB_URL: ${{ secrets.INFLUXDB_URL }}
        LOKI_URL: ${{ secrets.LOKI_URL }}
        GRAFANA_CLOUD_OTLP_ENDPOINT: ${{ secrets.GRAFANA_CLOUD_OTLP_ENDPOINT }}
        CA_CERT_PATH: ${{ secrets.CA_CERT_PATH }}
        CLIENT_CERT_PATH: ${{ secrets.CLIENT_CERT_PATH }}
        CLIENT_KEY_PATH: ${{ secrets.CLIENT_KEY_PATH }}
    
    - name: Validate configuration
      run: |
        python main.py validate
    
    - name: Check backend health
      run: |
        python main.py check-backends
      continue-on-error: true
    
    - name: Check TLS certificates
      run: |
        python main.py check-tls
      continue-on-error: true
    
    - name: Check instrumentation
      run: |
        python main.py check-instrumentation
      continue-on-error: true
    
    - name: Upload generated configs
      uses: actions/upload-artifact@v3
      with:
        name: otel-configs-${{ matrix.python-version }}
        path: |
          output/
          *.env
        retention-days: 7

  security-scan:
    runs-on: ubuntu-latest
    needs: discover-and-validate
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: 3.11
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install bandit safety
    
    - name: Security scan with Bandit
      run: |
        bandit -r . -f json -o bandit-report.json || true
    
    - name: Security scan with Safety
      run: |
        safety check --json --output safety-report.json || true
    
    - name: Upload security reports
      uses: actions/upload-artifact@v3
      with:
        name: security-reports
        path: |
          bandit-report.json
          safety-report.json
        retention-days: 30

  deploy-config:
    runs-on: ubuntu-latest
    needs: [discover-and-validate, security-scan]
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Download configs
      uses: actions/download-artifact@v3
      with:
        name: otel-configs-3.11
        path: output/
    
    - name: Deploy to staging
      run: |
        echo "Deploying OpenTelemetry configuration to staging..."
        # Add your deployment logic here
        # Example: kubectl apply, docker push, etc.
      env:
        KUBECONFIG: ${{ secrets.KUBECONFIG_STAGING }}
    
    - name: Notify deployment
      run: |
        echo "âœ… OpenTelemetry configuration deployed successfully!"
        echo "ðŸ“Š Check your observability stack for new telemetry data" 