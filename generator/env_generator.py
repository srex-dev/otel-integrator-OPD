import os
from pathlib import Path
from typing import Dict, List, Any

def generate_env_file(services: Dict[str, List[Any]], output_dir: str = "output") -> str:
    """Generate a .env file with OpenTelemetry configuration for discovered services."""
    env_content = """# OpenTelemetry Configuration for Discovered Services
# Generated by otel-integrator-OPD

# --- Collector endpoints ---
OTEL_EXPORTER_OTLP_ENDPOINT=http://localhost:4318
OTEL_EXPORTER_OTLP_PROTOCOL=http/protobuf

# --- Service name and resource attributes (update for each service) ---
OTEL_SERVICE_NAME=your-service-name
OTEL_SERVICE_VERSION=1.0.0
OTEL_ENVIRONMENT=dev
OTEL_TEAM=your-team
OTEL_OWNER=your-owner
# OTEL_RESOURCE_ATTRIBUTES can be extended with custom tags
OTEL_RESOURCE_ATTRIBUTES=service.name=${OTEL_SERVICE_NAME},service.version=${OTEL_SERVICE_VERSION},deployment.environment=${OTEL_ENVIRONMENT},team=${OTEL_TEAM},owner=${OTEL_OWNER}

# --- Sampling ---
OTEL_TRACES_SAMPLER=parentbased_traceidratio
OTEL_TRACES_SAMPLER_ARG=1.0

# --- Elastic APM Exporter ---
ELASTIC_APM_ENDPOINT=http://localhost:8200
ELASTIC_APM_SECRET_TOKEN=your_elastic_apm_secret_token
ELASTIC_TLS_INSECURE=false  # Set to true for dev/self-signed, false for prod

# --- InfluxDB Exporter ---
INFLUXDB_URL=http://localhost:8086
INFLUXDB_TOKEN=your_influxdb_token
INFLUXDB_ORG=your_influxdb_org
INFLUXDB_BUCKET=your_influxdb_bucket
INFLUXDB_TLS_INSECURE=false  # Set to true for dev/self-signed, false for prod

# --- Grafana Cloud Exporter ---
GRAFANA_CLOUD_OTLP_ENDPOINT=https://otlp-gateway-prod-us-central-0.grafana.net/otlp
GRAFANA_CLOUD_API_KEY=your_grafana_cloud_api_key
GRAFANA_TLS_INSECURE=false  # Set to true for dev/self-signed, false for prod

# --- TLS Configuration (used for Elastic, InfluxDB, Grafana) ---
CA_CERT_PATH=/path/to/ca-cert.pem
CLIENT_CERT_PATH=/path/to/client-cert.pem
CLIENT_KEY_PATH=/path/to/client-key.pem
DISABLE_SSL_VERIFICATION=false

# --- Language-specific options ---
# Python
OTEL_PYTHON_TRACER_PROVIDER=opentelemetry.trace.TracerProvider
OTEL_PYTHON_METER_PROVIDER=opentelemetry.metrics.MeterProvider
# Node.js
OTEL_NODE_RESOURCE_DETECTORS=env,host,os,process,service
OTEL_NODE_SERVICE_NAME=${OTEL_SERVICE_NAME}
# Java
OTEL_JAVA_AGENT_ENABLED=true
OTEL_JAVA_SERVICE_NAME=${OTEL_SERVICE_NAME}
# Go
OTEL_GO_SERVICE_NAME=${OTEL_SERVICE_NAME}
OTEL_GO_TRACES_SAMPLER=traceidratio
OTEL_GO_TRACES_SAMPLER_ARG=1.0
# .NET
OTEL_DOTNET_SERVICE_NAME=${OTEL_SERVICE_NAME}
OTEL_DOTNET_TRACES_SAMPLER=parentbased_traceidratio
OTEL_DOTNET_TRACES_SAMPLER_ARG=1.0

# --- Discovery summary (all categories, even if empty) ---
# The following sections list all discovered services by category.
"""
    
    # Add discovery summary
    discovery_keys = [
        "python", "node", "java", "go", "dotnet", "ruby", "php", "databases", "message_queues", "web_servers", "docker", "kubernetes", "logs", "ports", "cloud", "service_mesh", "custom"
    ]
    for key in discovery_keys:
        env_content += f"\n# {key.capitalize()} services detected\n"
        for service in services.get(key, []):
            if isinstance(service, dict):
                env_content += f"# {service.get('name', service.get('kind', 'Unknown'))} (PID: {service.get('pid', 'N/A')})\n"
            else:
                env_content += f"# {service}\n"
    
    # Write to file
    env_path = Path(output_dir) / "otel-config.env"
    with open(env_path, "w") as f:
        f.write(env_content)
    
    return str(env_path)

def generate_setup_instructions(services: Dict[str, List[Any]], output_dir: str = "output") -> str:
    """Generate setup instructions for discovered services."""
    instructions = """# OpenTelemetry Setup Instructions
# Generated by otel-integrator-OPD

## Quick Start

1. Copy the generated .env file to your application directory:
   cp output/otel-config.env .env

2. Update the service name in .env:
   OTEL_SERVICE_NAME=your-actual-service-name

3. Source the environment variables:
   source .env

## Language-Specific Setup

"""
    
    if services.get("python"):
        instructions += """
### Python Applications
```bash
# Install OpenTelemetry SDK
pip install opentelemetry-api opentelemetry-sdk opentelemetry-exporter-otlp

# In your Python code:
from opentelemetry import trace
from opentelemetry.sdk.trace import TracerProvider
from opentelemetry.sdk.trace.export import BatchSpanProcessor
from opentelemetry.exporter.otlp.proto.http.trace_exporter import OTLPSpanExporter

# Initialize tracer
trace.set_tracer_provider(TracerProvider())
tracer = trace.get_tracer(__name__)

# Add OTLP exporter
otlp_exporter = OTLPSpanExporter()
span_processor = BatchSpanProcessor(otlp_exporter)
trace.get_tracer_provider().add_span_processor(span_processor)
```
"""
    
    if services.get("node"):
        instructions += """
### Node.js Applications
```bash
# Install OpenTelemetry packages
npm install @opentelemetry/api @opentelemetry/sdk-trace-base @opentelemetry/exporter-otlp-http

# In your Node.js code:
const { trace } = require('@opentelemetry/api');
const { NodeTracerProvider } = require('@opentelemetry/sdk-trace-base');
const { OTLPTraceExporter } = require('@opentelemetry/exporter-otlp-http');

// Initialize tracer
const provider = new NodeTracerProvider();
provider.register();
```
"""
    
    if services.get("java"):
        instructions += """
### Java Applications
```bash
# Add to your JVM arguments:
-javaagent:/path/to/opentelemetry-javaagent.jar

# Or add to your pom.xml (Maven):
<dependency>
    <groupId>io.opentelemetry</groupId>
    <artifactId>opentelemetry-api</artifactId>
    <version>1.34.1</version>
</dependency>
```
"""
    
    if services.get("docker"):
        instructions += """
### Docker Applications
```bash
# Add environment variables to your docker-compose.yml:
environment:
  - OTEL_EXPORTER_OTLP_ENDPOINT=http://localhost:4318
  - OTEL_SERVICE_NAME=your-service-name
```
"""
    
    instructions += """
## Verification

1. Start your application with the OpenTelemetry configuration
2. Check that telemetry is being sent to the collector:
   curl http://localhost:4318/health

3. Verify data appears in your backends:
   - Elastic APM: http://localhost:8200
   - Grafana: http://localhost:3000
   - InfluxDB: http://localhost:8086

## Troubleshooting

- If telemetry isn't appearing, check the collector logs:
  docker logs otel-collector

- Verify your service name is set correctly
- Ensure the collector is running and accessible
- Check that your backend services are running
"""
    
    # Write to file
    instructions_path = Path(output_dir) / "setup-instructions.md"
    with open(instructions_path, "w") as f:
        f.write(instructions)
    
    return str(instructions_path)

def generate_all_env_outputs(services: Dict[str, List[Any]], output_dir: str = "output") -> Dict[str, str]:
    """Generate all environment and setup files."""
    env_file = generate_env_file(services, output_dir)
    instructions_file = generate_setup_instructions(services, output_dir)
    
    return {
        "env_file": env_file,
        "instructions_file": instructions_file
    } 